name: Publish ABIs Package
on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      allow_mismatched_names:
        description: 'Allow mismatched contract names (filename vs contract name inside file)'
        type: boolean
        default: false 
        required: false
      allow_interfaces:
        description: 'Include interface files (starting with I) in the build'
        type: boolean
        default: false
        required: false
      allow_changelog:
        description: 'Generate changelog by comparing against previous versions (slower)'
        type: boolean
        default: true
        required: false

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for tag history

      - name: Extract package scope
        id: package-info
        run: echo "scope=$(node -p "require('./abis-package/package.json').name.split('/')[0]")" >> $GITHUB_OUTPUT

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com'
          scope: ${{ steps.package-info.outputs.scope }}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Build contracts
        run: forge build

      - name: Configure build flags
        if: github.event_name == 'workflow_dispatch'
        run: |
          cd abis-package
          echo "Configuring build flags based on workflow inputs..."
          echo "ALLOW_MISMATCHED_NAMES: ${{ github.event.inputs.allow_mismatched_names }}"
          echo "ALLOW_INTERFACES: ${{ github.event.inputs.allow_interfaces }}"
          echo "ALLOW_CHANGELOG: ${{ github.event.inputs.allow_changelog }}"
          
          # Update build-config.js with workflow input values
          sed -i "s/const ALLOW_MISMATCHED_NAMES = [^;]*/const ALLOW_MISMATCHED_NAMES = ${{ github.event.inputs.allow_mismatched_names }}/g" build-config.js
          sed -i "s/const ALLOW_INTERFACES = [^;]*/const ALLOW_INTERFACES = ${{ github.event.inputs.allow_interfaces }}/g" build-config.js
          sed -i "s/const ALLOW_CHANGELOG = [^;]*/const ALLOW_CHANGELOG = ${{ github.event.inputs.allow_changelog }}/g" build-config.js
          
          echo "Updated build-config.js:"
          grep -E "(ALLOW_MISMATCHED_NAMES|ALLOW_INTERFACES|ALLOW_CHANGELOG)" build-config.js

      - name: Prepare package
        run: |
          cd abis-package
          
          # Extract package name from package.json
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            # Get current branch name
            CURRENT_BRANCH=$(git branch --show-current)
            echo "Current branch: $CURRENT_BRANCH"
            
            # 1. Get baseline version from git history
            GIT_BASELINE_TAG=$(git tag --merged HEAD | grep "^v[0-9]" | sort -V | tail -1 || echo "")
            GIT_BASELINE_VERSION=${GIT_BASELINE_TAG#v}
            if [[ -z "$GIT_BASELINE_VERSION" ]]; then
              GIT_BASELINE_VERSION="0.0.0"
            fi
            echo "Git baseline version: $GIT_BASELINE_VERSION"
            
            # 2. Get branch-specific published version
            if [[ "$CURRENT_BRANCH" != "main" ]]; then
              # For feature branches, check branch-specific version
              PUBLISHED_VERSION=$(npm view "$PACKAGE_NAME@$CURRENT_BRANCH" version --registry=https://npm.pkg.github.com 2>/dev/null || echo "0.0.0")
              echo "Branch published version: $PUBLISHED_VERSION"
              
              # Also check if any version with this branch suffix exists
              ALL_BRANCH_VERSIONS=$(npm view "$PACKAGE_NAME" versions --json --registry=https://npm.pkg.github.com 2>/dev/null | jq -r '.[]' | grep -- "-$CURRENT_BRANCH$" | sort -V | tail -1 || echo "")
              if [[ -n "$ALL_BRANCH_VERSIONS" ]]; then
                # Extract base version from the latest branch version
                LATEST_BRANCH_VERSION=$(echo "$ALL_BRANCH_VERSIONS" | cut -d'-' -f1)
                echo "Latest branch version found: $ALL_BRANCH_VERSIONS (base: $LATEST_BRANCH_VERSION)"
                # Use the higher of published version or latest branch version
                if [[ $(printf '%s\n%s' "$PUBLISHED_VERSION" "$LATEST_BRANCH_VERSION" | sort -V | tail -1) == "$LATEST_BRANCH_VERSION" ]]; then
                  PUBLISHED_VERSION="$LATEST_BRANCH_VERSION"
                fi
              fi
            else
              # For main branch, check latest tag
              PUBLISHED_VERSION=$(npm view "$PACKAGE_NAME@latest" version --registry=https://npm.pkg.github.com 2>/dev/null || echo "0.0.0")
              echo "Main published version: $PUBLISHED_VERSION"
              
              # Also check all published versions to find the highest main version (no branch suffix)
              ALL_MAIN_VERSIONS=$(npm view "$PACKAGE_NAME" versions --json --registry=https://npm.pkg.github.com 2>/dev/null | jq -r '.[]' | grep -v -- "-" | sort -V | tail -1 || echo "")
              if [[ -n "$ALL_MAIN_VERSIONS" ]]; then
                echo "Latest main version found: $ALL_MAIN_VERSIONS"
                # Use the higher of published version or latest main version
                if [[ $(printf '%s\n%s' "$PUBLISHED_VERSION" "$ALL_MAIN_VERSIONS" | sort -V | tail -1) == "$ALL_MAIN_VERSIONS" ]]; then
                  PUBLISHED_VERSION="$ALL_MAIN_VERSIONS"
                fi
              fi
            fi
            
            # 3. Get current package.json version (remove branch suffix for comparison)
            PACKAGE_VERSION_FULL=$(node -p "require('./package.json').version || '0.0.0'")
            PACKAGE_VERSION=$(echo "$PACKAGE_VERSION_FULL" | cut -d'-' -f1)
            echo "Package.json version: $PACKAGE_VERSION_FULL (base: $PACKAGE_VERSION)"
            
            # 4. Find the highest version among all three
            VERSIONS=("$GIT_BASELINE_VERSION" "$PUBLISHED_VERSION" "$PACKAGE_VERSION")
            BASE_VERSION=$(printf '%s\n' "${VERSIONS[@]}" | sort -V | tail -1)
            echo "Highest version found: $BASE_VERSION"
            
            # 5. Increment the version
            INCREMENT_VERSION=$(echo $BASE_VERSION | awk -F. -v OFS=. '{$NF++;print}')
            
            # 6. Add branch suffix if not on main
            if [[ "$CURRENT_BRANCH" != "main" ]]; then
              VERSION="${INCREMENT_VERSION}-${CURRENT_BRANCH}"
            else
              VERSION="${INCREMENT_VERSION}"
            fi
            
            echo "Final version: $VERSION"
          fi
          
          npm version $VERSION --no-git-tag-version
          npm run build
          
          # Copy generated README to root for npm registry display
          cp dist/README.md README.md
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to GitHub Packages
        run: |
          cd abis-package
          npm publish
          
          # Tag the commit after successful publish
          VERSION=$(node -p "require('./package.json').version")
          git tag "v$VERSION"
          git push origin "v$VERSION"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

